import { readFileSync } from "fs";
import { join } from "path";
import { google } from "googleapis";
import { readBody, defineEventHandler, useRuntimeConfig } from "#imports";

const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS_JSON);

export default defineEventHandler(async (event) => {
	const body = await readBody(event);
	const { guests, message } = body;

	const config = useRuntimeConfig();

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
	const guestsList = guests
		.map((guest, index) => `${index + 1}. ${guest.name || "–ë–µ–∑ –∏–º–µ–Ω–∏"}`)
		.join("\n");

	const text = `
üë§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:
–ì–æ—Å—Ç–∏ (${guests.length}):
${guestsList}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${message || "‚Äî"}
`;

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
	await fetch(
		`https://api.telegram.org/bot${config.telegramToken}/sendMessage`,
		{
			method: "POST",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({
				chat_id: config.telegramChatId,
				text,
			}),
		}
	);

	try {
		const auth = new google.auth.GoogleAuth({
			credentials,
			scopes: ["https://www.googleapis.com/auth/spreadsheets"],
		});
		const client = await auth.getClient();
		const sheets = google.sheets({ version: "v4", auth: client });

		// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets
		const values = [];
		const totalGuests = guests.length;

		guests.forEach((guest, index) => {
			if (index === 0) {
				// –ü–µ—Ä–≤—ã–π –≥–æ—Å—Ç—å (–æ—Å–Ω–æ–≤–Ω–æ–π) - —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
				values.push([
					guest.name || "–ë–µ–∑ –∏–º–µ–Ω–∏",
					totalGuests,
					message || "‚Äî",
				]);
			} else {
				// –û—Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞
				values.push([guest.name || "–ë–µ–∑ –∏–º–µ–Ω–∏", "", ""]);
			}
		});

		// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
		const appendResult = await sheets.spreadsheets.values.append({
			spreadsheetId: config.googleSheetId,
			range: "–õ–∏—Å—Ç1!A:C",
			valueInputOption: "USER_ENTERED",
			resource: {
				values: values,
			},
		});

		console.log("Google Sheets append result:", appendResult.data);

		// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
		await formatGoogleSheet(
			sheets,
			config.googleSheetId,
			appendResult.data.updates.updatedRange
		);
	} catch (err) {
		console.error(
			"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets:",
			err.response?.data || err.message || err
		);
	}

	return { ok: true };
});

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Sheets
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —á–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –∏ –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Å—Ç–µ–π
 */
async function formatGoogleSheet(sheets, spreadsheetId, updatedRange) {
	try {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –∏–∑ updatedRange (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–õ–∏—Å—Ç1!A2:C4")
		const rangeMatch = updatedRange.match(/!A(\d+):C(\d+)/);
		if (!rangeMatch) return;

		const startRow = parseInt(rangeMatch[1]) - 1; // Google Sheets API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 0-based –∏–Ω–¥–µ–∫—Å—ã
		const endRow = parseInt(rangeMatch[2]) - 1;

		const requests = [];
		let isMainGuest = true;
		let currentBackgroundColor = { red: 0.8, green: 0.9, blue: 1.0 }; // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π

		for (let row = startRow; row <= endRow; row++) {
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∏ –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –∂–∏—Ä–Ω—ã–º
			const backgroundColor = currentBackgroundColor;
			const isBold = isMainGuest;

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
			requests.push({
				repeatCell: {
					range: {
						sheetId: 0,
						startRowIndex: row,
						endRowIndex: row + 1,
						startColumnIndex: 0,
						endColumnIndex: 3,
					},
					cell: {
						userEnteredFormat: {
							backgroundColor: backgroundColor,
							textFormat: {
								bold: isBold,
							},
						},
					},
					fields: "userEnteredFormat(backgroundColor,textFormat)",
				},
			});

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã–º –≥–æ—Å—Ç–µ–º
			// (–µ—Å–ª–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ B –µ—Å—Ç—å —á–∏—Å–ª–æ, —Ç–æ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Å—Ç—å)
			if (row < endRow) {
				// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
				const nextRowData = await sheets.spreadsheets.values.get({
					spreadsheetId: spreadsheetId,
					range: `–õ–∏—Å—Ç1!B${row + 2}:B${row + 2}`,
				});

				const nextRowHasCount =
					nextRowData.data.values &&
					nextRowData.data.values[0] &&
					nextRowData.data.values[0][0] &&
					!isNaN(nextRowData.data.values[0][0]);

				if (nextRowHasCount) {
					// –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Å—Ç—å, –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç
					isMainGuest = true;
					currentBackgroundColor =
						currentBackgroundColor.red === 1
							? { red: 0.8, green: 0.9, blue: 1.0 } // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
							: { red: 1.0, green: 1.0, blue: 1.0 }; // –ë–µ–ª—ã–π
				} else {
					// –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Å—Ç—å
					isMainGuest = false;
				}
			}
		}

		// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
		if (requests.length > 0) {
			await sheets.spreadsheets.batchUpdate({
				spreadsheetId: spreadsheetId,
				resource: {
					requests: requests,
				},
			});
		}
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Google Sheets:", error);
	}
}
